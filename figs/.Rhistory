result <- simulation_DelaySSA(algorithm = "DelayMNR", sample_size=sample, tmax=tmax, n_initial=n_initial, t_initial=t_initial, S_matrix=S_matrix, S_matrix_delay=S_matrix_delay, k=k, product_matrix=product_matrix, delay_type=delay_type , delaytime_list=delaytime_list)
Specie <- c("G0","G1", "G2","N")
svg <- svglite("Refractory_mean.svg", width = 5, height = 5)
t=seq(0, tmax, by = 1)
t_initial = 0
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(1:num_columns, function(i) {
n <- lapply(t, function(x) plot_mean(result, i, x))
n <- unlist(n)
if (t[1] == t_initial)
n[1] <- n_initial[i, ]
data.frame(t = t, quantity = n, Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = t, y = quantity, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "T", y = "Mean Value") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
svg <- svglite("Refractory_density_150s.svg", width = 5, height = 5)
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(1:num_columns, function(i) {
n <- lapply(result, function(x) picksample(x, i, t=tmax))
n <- unlist(n)
plot_xy <- convert_pdf(n)
if (!all(data.frame(percentage = plot_xy)[, 1] == data.frame(percentage = plot_xy)[,2])) {
warning("Error in Calculating Density Table")
}
data.frame(quantity = data.frame(percentage = plot_xy)[,1], percentage = data.frame(percentage = plot_xy)[,3], Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = quantity, y = percentage, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "# of Products", y = "Probability") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
data_list <- lapply(1:num_columns, function(i) {
n <- lapply(t, function(x) plot_mean(result, i, x))
n <- unlist(n)
if (t[1] == t_initial)
n[1] <- n_initial[i, ]
data.frame(t = t, quantity = n, Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = t, y = quantity, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "T", y = "Mean Value") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
data_list <- lapply(1:num_columns, function(i) {
n <- lapply(result, function(x) picksample(x, i, t=tmax))
n <- unlist(n)
plot_xy <- convert_pdf(n)
if (!all(data.frame(percentage = plot_xy)[, 1] == data.frame(percentage = plot_xy)[,2])) {
warning("Error in Calculating Density Table")
}
data.frame(quantity = data.frame(percentage = plot_xy)[,1], percentage = data.frame(percentage = plot_xy)[,3], Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = quantity, y = percentage, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "# of Products", y = "Probability") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
sample <- 10000
tmax <- 150
n_initial <- matrix(c(0),nrow = 1)
t_initial <- 0
S_matrix <- c(1)
S_matrix <- matrix(S_matrix,nrow = 1)
S_matrix_delay <- c(-1)
S_matrix_delay <- matrix(S_matrix_delay,nrow = 1)
k <- c(10)
product_matrix <- matrix(c(0),nrow = 1)
delay_type <- matrix(c(2),nrow = 1)
delaytime_list <- list()
delaytime_list <- append(delaytime_list,rgamma(n = 1, shape = 7, rate = 1))
result <- simulation_DelaySSA(algorithm = "DelayMNR", sample_size=sample, tmax=tmax, n_initial=n_initial, t_initial=t_initial, S_matrix=S_matrix, S_matrix_delay=S_matrix_delay, k=k, product_matrix=product_matrix, delay_type=delay_type , delaytime_list=delaytime_list)
Specie <- c("N")
svg <- svglite("BirthDeath_mean.svg", width = 5, height = 5)
t=seq(0, tmax, by = 1)
t_initial = 0
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(1:num_columns, function(i) {
n <- lapply(t, function(x) plot_mean(result, i, x))
n <- unlist(n)
if (t[1] == t_initial)
n[1] <- n_initial[i, ]
data.frame(t = t, quantity = n, Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = t, y = quantity, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "T", y = "Mean Value") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
svg <- svglite("BirthDeath_density_150s.svg", width = 5, height = 5)
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(1:num_columns, function(i) {
n <- lapply(result, function(x) picksample(x, i, t=tmax))
n <- unlist(n)
plot_xy <- convert_pdf(n)
if (!all(data.frame(percentage = plot_xy)[, 1] == data.frame(percentage = plot_xy)[,2])) {
warning("Error in Calculating Density Table")
}
data.frame(quantity = data.frame(percentage = plot_xy)[,1], percentage = data.frame(percentage = plot_xy)[,3], Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = quantity, y = percentage, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "# of Products", y = "Probability") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
sample <- 10000
tmax <- 150
n_initial <- matrix(c(1000,1000,0),nrow = 3)
t_initial <- 0
S_matrix <- c(-1,-1,0,0,0,-1)
S_matrix <- matrix(S_matrix,nrow = 3)
S_matrix_delay <- c(0,0,1,0,0,0)
S_matrix_delay <- matrix(S_matrix_delay,nrow = 3)
k <- c(0.001,0.001)
product_matrix <- matrix(c(1,1,0,0,0,1),nrow = 3)
delay_type <- matrix(c(2,0),nrow = 1)
delaytime_list <- list()
delaytime_list <- append(delaytime_list,0.1)
delaytime_list <- append(delaytime_list,0)
result <- simulation_DelaySSA(algorithm = "DelayMNR", sample_size=sample, tmax=tmax, n_initial=n_initial, t_initial=t_initial, S_matrix=S_matrix, S_matrix_delay=S_matrix_delay, k=k, product_matrix=product_matrix, delay_type=delay_type , delaytime_list=delaytime_list)
Specie <- c("S1 S2","S1 S2","S3")
svg <- svglite("TwoChannels_mean.svg", width = 5, height = 5)
t=seq(0, tmax, by = 1)
t_initial = 0
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(c(2,3), function(i) {
n <- lapply(t, function(x) plot_mean(result, i, x))
n <- unlist(n)
if (t[1] == t_initial)
n[1] <- n_initial[i, ]
data.frame(t = t, quantity = n, Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = t, y = quantity, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "T", y = "Mean Value") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
svg <- svglite("TwoChannels_density_150s.svg", width = 5, height = 5)
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(c(2,3), function(i) {
n <- lapply(result, function(x) picksample(x, i, t=tmax))
n <- unlist(n)
plot_xy <- convert_pdf(n)
if (!all(data.frame(percentage = plot_xy)[, 1] == data.frame(percentage = plot_xy)[,2])) {
warning("Error in Calculating Density Table")
}
data.frame(quantity = data.frame(percentage = plot_xy)[,1], percentage = data.frame(percentage = plot_xy)[,3], Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = quantity, y = percentage, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "# of Products", y = "Probability") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
sample <- 100000
tmax <- 400
n_initial <- matrix(c(0,0),nrow = 2)
t_initial <- 0
S_matrix <- c(1,0,0,-1)
S_matrix <- matrix(S_matrix,nrow = 2)
S_matrix_delay <- c(-1,1,0,0)
S_matrix_delay <- matrix(S_matrix_delay,nrow = 2)
k <- function(n){  k <- c(1/(1 + (n[2])^2), 1/(1 + n[2]))}
product_matrix <- matrix(c(0,0,0,1),nrow = 2)
delay_type <- matrix(c(2,0),nrow = 1)
delaytime_list <- list()
delaytime_list <- append(delaytime_list,20)
delaytime_list <- append(delaytime_list,0)
result <- simulation_DelaySSA(algorithm = "DelayMNR", sample_size=sample, tmax=tmax, n_initial=n_initial, t_initial=t_initial, S_matrix=S_matrix, S_matrix_delay=S_matrix_delay, k=k, product_matrix=product_matrix, delay_type=delay_type , delaytime_list=delaytime_list)
Specie <- c("X","Y")
svg <- svglite("Oscillation_mean.svg", width = 5, height = 5)
t=seq(0, tmax, by = 1)
t_initial = 0
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(1:num_columns, function(i) {
n <- lapply(t, function(x) plot_mean(result, i, x))
n <- unlist(n)
if (t[1] == t_initial)
n[1] <- n_initial[i, ]
data.frame(t = t, quantity = n, Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = t, y = quantity, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "T", y = "Mean Value") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
svg <- svglite("Oscillation_density_400s.svg", width = 5, height = 5)
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(1:num_columns, function(i) {
n <- lapply(result, function(x) picksample(x, i, t=tmax))
n <- unlist(n)
plot_xy <- convert_pdf(n)
if (!all(data.frame(percentage = plot_xy)[, 1] == data.frame(percentage = plot_xy)[,2])) {
warning("Error in Calculating Density Table")
}
data.frame(quantity = data.frame(percentage = plot_xy)[,1], percentage = data.frame(percentage = plot_xy)[,3], Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = quantity, y = percentage, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "# of Products", y = "Probability") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
sample <- 100000
tmax <- 150
n_initial <- matrix(c(1,0,0,0),nrow = 4)
t_initial <- 0
S_matrix <- c(-1,1,0,0,0,-1,1,0,1,0,-1,0,0,0,0,1)
S_matrix <- matrix(S_matrix,nrow = 4)
S_matrix_delay <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1)
S_matrix_delay <- matrix(S_matrix_delay,nrow = 4)
k <- c(0.15,0.1,0.05,10)
product_matrix <- matrix(c(1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0),nrow = 4)
delay_type <- matrix(c(0,0,0,2),nrow = 1)
delaytime_list <- list()
delaytime_list <- append(delaytime_list,0)
delaytime_list <- append(delaytime_list,0)
delaytime_list <- append(delaytime_list,0)
delaytime_list <- append(delaytime_list,1)
result <- simulation_DelaySSA(algorithm = "DelayMNR", sample_size=sample, tmax=tmax, n_initial=n_initial, t_initial=t_initial, S_matrix=S_matrix, S_matrix_delay=S_matrix_delay, k=k, product_matrix=product_matrix, delay_type=delay_type , delaytime_list=delaytime_list)
sample <- 10000
tmax <- 150
n_initial <- matrix(c(1,0,0,0),nrow = 4)
t_initial <- 0
S_matrix <- c(-1,1,0,0,0,-1,1,0,1,0,-1,0,0,0,0,1)
S_matrix <- matrix(S_matrix,nrow = 4)
S_matrix_delay <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1)
S_matrix_delay <- matrix(S_matrix_delay,nrow = 4)
k <- c(0.15,0.1,0.05,10)
product_matrix <- matrix(c(1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0),nrow = 4)
delay_type <- matrix(c(0,0,0,2),nrow = 1)
delaytime_list <- list()
delaytime_list <- append(delaytime_list,0)
delaytime_list <- append(delaytime_list,0)
delaytime_list <- append(delaytime_list,0)
delaytime_list <- append(delaytime_list,1)
result <- simulation_DelaySSA(algorithm = "DelayMNR", sample_size=sample, tmax=tmax, n_initial=n_initial, t_initial=t_initial, S_matrix=S_matrix, S_matrix_delay=S_matrix_delay, k=k, product_matrix=product_matrix, delay_type=delay_type , delaytime_list=delaytime_list)
Specie <- c("G0","G1", "G2","N")
svg <- svglite("Refractory_mean.svg", width = 5, height = 5)
t=seq(0, tmax, by = 1)
t_initial = 0
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(4, function(i) {
n <- lapply(t, function(x) plot_mean(result, i, x))
n <- unlist(n)
if (t[1] == t_initial)
n[1] <- n_initial[i, ]
data.frame(t = t, quantity = n, Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = t, y = quantity, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "T", y = "Mean Value") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
svg <- svglite("Refractory_density_150s.svg", width = 5, height = 5)
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(4, function(i) {
n <- lapply(result, function(x) picksample(x, i, t=tmax))
n <- unlist(n)
plot_xy <- convert_pdf(n)
if (!all(data.frame(percentage = plot_xy)[, 1] == data.frame(percentage = plot_xy)[,2])) {
warning("Error in Calculating Density Table")
}
data.frame(quantity = data.frame(percentage = plot_xy)[,1], percentage = data.frame(percentage = plot_xy)[,3], Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = quantity, y = percentage, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "# of Products", y = "Probability") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
sample <- 10000
tmax <- 150
n_initial <- matrix(c(1000,1000,0),nrow = 3)
t_initial <- 0
S_matrix <- c(-1,-1,0,0,0,-1)
S_matrix <- matrix(S_matrix,nrow = 3)
S_matrix_delay <- c(0,0,1,0,0,0)
S_matrix_delay <- matrix(S_matrix_delay,nrow = 3)
k <- c(0.001,0.001)
product_matrix <- matrix(c(1,1,0,0,0,1),nrow = 3)
delay_type <- matrix(c(2,0),nrow = 1)
delaytime_list <- list()
delaytime_list <- append(delaytime_list,0.1)
delaytime_list <- append(delaytime_list,0)
result <- simulation_DelaySSA(algorithm = "DelayMNR", sample_size=sample, tmax=tmax, n_initial=n_initial, t_initial=t_initial, S_matrix=S_matrix, S_matrix_delay=S_matrix_delay, k=k, product_matrix=product_matrix, delay_type=delay_type , delaytime_list=delaytime_list)
Specie <- c("S1 S2","S1 S2","S3")
svg <- svglite("TwoChannels_mean.svg", width = 5, height = 5)
t=seq(0, tmax, by = 1)
t_initial = 0
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(c(2,3), function(i) {
n <- lapply(t, function(x) plot_mean(result, i, x))
n <- unlist(n)
if (t[1] == t_initial)
n[1] <- n_initial[i, ]
data.frame(t = t, quantity = n, Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = t, y = quantity, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "T", y = "Mean Value") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
svg <- svglite("TwoChannels_S1andS2_density_150s.svg", width = 5, height = 5)
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(c(2), function(i) {
n <- lapply(result, function(x) picksample(x, i, t=tmax))
n <- unlist(n)
plot_xy <- convert_pdf(n)
if (!all(data.frame(percentage = plot_xy)[, 1] == data.frame(percentage = plot_xy)[,2])) {
warning("Error in Calculating Density Table")
}
data.frame(quantity = data.frame(percentage = plot_xy)[,1], percentage = data.frame(percentage = plot_xy)[,3], Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = quantity, y = percentage, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "# of Products", y = "Probability") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
svg <- svglite("TwoChannels_S3_density_150s.svg", width = 5, height = 5)
num_columns <- nrow(result[[1]]$n_values)
data_list <- lapply(c(3), function(i) {
n <- lapply(result, function(x) picksample(x, i, t=tmax))
n <- unlist(n)
plot_xy <- convert_pdf(n)
if (!all(data.frame(percentage = plot_xy)[, 1] == data.frame(percentage = plot_xy)[,2])) {
warning("Error in Calculating Density Table")
}
data.frame(quantity = data.frame(percentage = plot_xy)[,1], percentage = data.frame(percentage = plot_xy)[,3], Specie = Specie[i])
})
plot_data <- do.call(rbind, data_list)
ggplot2::ggplot(plot_data, ggplot2::aes(x = quantity, y = percentage, color = Specie)) +
ggplot2::geom_line(linewidth = 0.7) +  # 调整折线图的线条粗细
ggplot2::labs(x = "# of Products", y = "Probability") +
ggplot2::scale_color_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(
plot.title = ggplot2::element_text(hjust = 0.5, size = 14, face = "bold"),  # 调整标题的大小和样式
axis.title = ggplot2::element_text(size = 12, face = "bold"),  # 调整轴标题的大小和样式
axis.text = ggplot2::element_text(size = 10),  # 调整轴标签的大小
legend.title = ggplot2::element_blank(),  # 移除图例标题
legend.text = ggplot2::element_text(size = 10),  # 调整图例文本的大小
panel.grid = ggplot2::element_blank(),  # 移除所有网格线
panel.background = ggplot2::element_blank(),  # 移除背景
axis.line = ggplot2::element_line(color = "black")  # 添加轴线
)
dev.off()
